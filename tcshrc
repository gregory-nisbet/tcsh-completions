# path to this directory
set tcshdir = $HOME/tcsh-completions

#goto END

# useful stuff:
# http://unix.t-a-y-l-o-r.com/ULcshrc.html

# csh does not have the ability to trap signals other than INT
# weirdly enough
# this value makes ctrl-c do nothing.
# I like to use ctrl-c to abandon a command so I'm not using it
# onintr -

# I want the pretty '>' and '#' default on
# OS X; this does sort of make the prompt
# look too much like bash though
unset promptchars

# set the editor to vi if there is a vi
# vi is usually provided by vim but I might be on an old-school
# system someday
setenv EDITOR /usr/bin/vi
setenv VISUAL /usr/bin/vi
setenv SUDO_EDITOR /usr/bin/vi
if (-f /usr/local/bin/vim) then
    setenv EDITOR /usr/local/bin/vim
    setenv VISUAL /usr/local/bin/vim
    setenv SUDO_EDITOR /usr/local/bin/vim
endif

# goto END

# detect interactive shell
if ($?prompt) then
    :
else
    goto END
endif

# this is a glob for probable source files
set source_extensions = ( \
    c h cc C tex 1 man l y \
    py pl php sh bash groovy java \
    rb go hs lhs ml\
)

# build up the glob
# unforunately these glob leaves an extra comma at the end
set source_file = '*.{'
foreach item ($source_extensions)
    set source_file = "$source_file""$item"','
end
set source_file = "$source_file"'}'

# rehash whenever you find something
if (`$tcshdir/version-compare $tcsh 6.19` == 'LT') then
    :
else
    set autorehash
endif

# don't overwrite existing files
set noclobber

# highlight in i searches
set highlight

# goto END

# dedicated .tcsh_history
set histfile = ~/.tcsh_history
# remember a whole bunch of history
set history = 100000
# keep 100000 lines of history
# merge the history together
# lock the history file to prevent simultaneous tcshs
# from saving history
set savehist = (100000 merge lock)
# histdup
# here are the values 
# 'all' < only unique entries
# 'prev' < not sure, here is the exact description from tcsh.org
# If set to `prev' and the last history event is the
# same as the current command, then the current command is not entered in the history.
set histdup = erase

# notify asynchronously
# set notify

# tcsh has a kill ring with similar features to
# the history, let's enableit
set killdup = erase
# thirty is the default, but let's set it explictly anyway
set killring = 30

# set the completion mode to enhance, ignores case and considers
# -_. to be equivalent word separators
set complete = enhance

# I don't want filec since escape 
# shouldn't do what tab does
# don't set filec

# tcsh makes too much noise on empty file completion
set nobeep

# do not expand wilcards and such when there is no match
# behaves like bourne shell
# I think this is the behavior we want for an interactive shell
set nonomatch

# print the exit value if there it is not zero
set printexitvalue

# useful configuration setting from Ubuntu's /etc/csh.cshrc 
# file
# %U %m %u underlined machine name 
# %B %~ %b bolded current working directory
# %# appropriate final prompt character
set prompt='%U%m%u:%B%~%b%# '

# helpful recommendations for colorful tcsh prompting from
# http://www.tcsh.org/TipsAndTricks
set autolist
set color
set colorcat

# another helpful recommendation from Ubuntu's
# /etc/csh.cshrc
set autoexpand

# compatibility section, taken from
# Ubuntu (Debian?) /etc/csh.cshrc
bindkey "^[[1~" beginning-of-line # home key
bindkey "^[[7~" beginning-of-line # home urxvt
bindkey "^[[2~" overwrite-mode # insert
bindkey "^[[4~" end-of-line # end
bindkey "^[[8~" end-of-line # end rxvt 
# tcsh delete does not delete on Mac OS X
bindkey "^[[3~" delete-char
# tcsh reverse history search
bindkey "^R" i-search-back
# note that i-search-fwd is unbound
bindkey "^[[5~" history-search-backward
bindkey "^[[6~" history-search-forward
# cocoa word movement
bindkey "^[^[[D" backward-word
bindkey "^[^[[C" forward-word
bindkey "^[^[[A" beginning-of-line
bindkey "^[^[[B" end-of-line

# this path is fairly standard based on Ubuntu and OS X
# except for /usr/local/brew/bin

# there is some weirdness going on with duplication in where
# e.g.
# % where bash
# > /bin/bash
# > /bin/bash
#if (1) then
    #set path = ( \
        #$HOME/bin \
        #/usr/local/brew/bin \
        #/usr/local/sbin \
        #/usr/local/bin \
        #/usr/bin \
        #/bin \
        #/usr/sbin \
        #/sbin \
        #/opt/X11/bin \
        #/Library/TeX/texbin \
        #/usr/games \
        #/usr/local/games \
    #)
#endif

set newpath = "$HOME/bin"
set newpath = "$newpath":/usr/local/brew/bin
set newpath = "$newpath":/usr/local/sbin
set newpath = "$newpath":/usr/local/bin
set newpath = "$newpath":/usr/bin
set newpath = "$newpath":/bin
set newpath = "$newpath":/usr/sbin
set newpath = "$newpath":/sbin
set newpath = "$newpath":/opt/X11/bin
set newpath = "$newpath":/Library/TeX/texbin
set newpath = "$newpath":/usr/games
set newpath = "$newpath":/usr/local/games

setenv PATH "$newpath"

# enable backslash_quote
set backslash_quote

# /usr/local/bin
# if (-d "/usr/local/bin") then
#    setenv PATH "/usr/local/bin:""$PATH"
# endif

# /usr/local/sbin
# if (-d "/usr/local/sbin") then
#    setenv PATH "/usr/local/sbin:""$PATH"
# endif

# add opt local bin for opt stuff
# if (-d "/opt/local/bin") then
#     setenv PATH "/opt/local/bin:""$PATH"
# endif

# add bin directory if it isn't already added to the path
# if ( -d "$HOME"/bin ) then
#     setenv PATH "$HOME"/bin:"$PATH"
# endif

source $tcshdir/autoload.csh

# this disables the internal hash table.
# actually I think I want it most of the time
# set unhash

# this is potentially related to a weird tcsh bug
# check if there's an opam file and source it if necessary
# if (-f $HOME/.opam_tcshrc) then
#    source $HOME/.opam_tcshrc
# endif

END:
# end of program
